
Default methods enable to add new functionality to the interfaces of your libraries and ensure binary compatibility 
with code written for older versions of those interfaces. to developers will not be forced to implement default methods
For example : Iterable interface which is implemented by Collection classes was provided default foreach method
with forcing the Collection classes to implement these methods

Interface default methods help in extending interfaces without having the fear of breaking implementation classes.

Interfaces can not have default methods with same signature of object class (e.g. equals and hashcode)
However it can have overloaded methods   

A new package java.util.Function has been added with bunch of functional interfaces to provide target types for lambda 
expressions and method references.

The interface can also declare the abstracts methods from the java.lang.Object class but still the interface can be called
as Functional Interface. For example Comparator interface declares equals method.

Lambda expressions are Java's first step into functional programming . A Java lambda expression is thus a function which
can be created without belonging to any class. A Lambda expression can be passed around as if it was an object and
executed on demand.

A Lambda expression is characterized by following syntax
parameter -> Method body

Lambda expressions
Zero parameter: ()->{method body};
One parameter: (name)->{method body}; or name->{method body}; or  (String name)->{method body};

foreach is default method of Iterable inteface
default void forEach(Consumer<? super T> action) {
        Objects.requireNonNull(action);
        for (T t : this) {
            action.accept(t);
        }
    }
    Stream interface also has foreach method 
    
Type Inference : is a compilers ability to look at each method invocation and corresponding declaration to determine
the type arguments  that make the invocation applicable.The inference algorithm determines the type of arguments and
return types


Java 8 Lambda Limitations

Lambda expressions (as well as anonymous classes) in Java can only access to the final (or effectively final)
variables of the enclosing scope.

Java stores function variables (e.g. count) in the stack; those are removed with the termination of createCounter. 
The created lambdas use copied versions of count. If the compiler allowed the second lambda to change its copied 
version of count , it would be quite confusing.
To support this type of closures, Java should save the enclosing scopes in the heap to let them survive after the 
function's termination
