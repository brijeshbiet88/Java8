Introduced in Java 8, the Stream API is used to process collections of objects. A stream is a sequence of objects
that supports various methods which can be pipelined to produce the desired result.

The features of Java stream are –

    A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
    Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
    Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate
    operations can be pipelined. Terminal operations mark the end of the stream and return the result.
    
Intermediate operations:
map , flatmap , filter , distinct , sorted , peek , limit , skip

Terminal Operations:
forEach , toArray , reduce , collect , min , max , count , anyMatch , allMatch 
noneMatch , findFirst , findAny

Stream Creation:
Stream.empty() is used to create empty stream
collection.stream(); //set , list 
Stream.of(array);
Arrays.stream(arr);
Arrays.stream(arr , 1 , 3);//length 2

Stream.builder() : 
when builder is used the desired part should also be specified in the right part of the statement
otherwise the build method will create an instance of Stream<Object>

Stream<String> streamBuilder = Stream.<String>builder.add("a").add("b").build();

Stream.generate();

Primitive Streams :
intStream , longStreams , doubleStreams
using these interfaces alleviates unnecessary auto boxing allows increase productivity
